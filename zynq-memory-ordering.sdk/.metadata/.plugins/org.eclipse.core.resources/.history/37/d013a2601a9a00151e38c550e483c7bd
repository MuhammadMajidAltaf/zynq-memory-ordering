/*
 * constant_definitions.h
 *
 *  Created on: Dec 3, 2015
 *      Author: scdl
 */

#ifndef CONSTANT_DEFINITIONS_H_
#define CONSTANT_DEFINITIONS_H_

#include "xparameters.h"
#include "xgpiops.h"
#include "xscugic.h"

#include <string.h>
#include <stdlib.h>

#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include "serial.h"

#include "hardware_accelerator_dbg.h"
#include "axi4_metrics_counter.h"
#include "amp.h"

#define IO_ID								XPAR_XGPIOPS_0_DEVICE_ID
#define IO_DIRECTION_OUT(p)					XGpioPs_SetDirectionPin(&emio_obj, (p), 1)
#define IO_DIRECTION_IN(p)					XGpioPs_SetDirectionPin(&emio_obj, (p), 0)
#define IO_WRITE_HIGH(p)					XGpioPs_WritePin(&emio_obj, (p), 1)
#define IO_WRITE_LOW(p)						XGpioPs_WritePin(&emio_obj, (p), 0)
#define IO_READ(p)							XGpioPs_ReadPin(&emio_obj, (p))
#define IO_BASE								54
#define IO_ENABLE(ha_id)					(IO_BASE+(ha_id))
#define TASK_DEFAULT_SIZE					(configMINIMAL_STACK_SIZE+512)
#define CPU_DISABLE							1
#define CPU_WARNING_ADDED					"Needs to be updated"
#define HA_ACP_0_STRING						"ha_acp_0"
#define HA_ACP_0_IS_CONNECTED_TO_ACP_FLAG	1
#define HA_ACP_0_IS_64b_FLAG				1
#define HA_ACP_0_IS_CACHE_COHERENT_FLAG		1
#define HA_ACP_0_IO_RUN_OPERATION			IO_ENABLE(1)
#define HA_ACP_0_INT_ID						XPAR_FABRIC_HIER_PSPL_PORT_ACP_HIER_HARDWARE_ACCELERATOR_0_HARDWARE_ACCELERATOR_0_READY_INTR
#define HA_ACP_0_REGISTERS_BASE_ADDRESS		XPAR_HIER_PSPL_PORT_ACP_HIER_HARDWARE_ACCELERATOR_0_HARDWARE_ACCELERATOR_0_S_AXI_LITE_REGISTERS_BASEADDR
#define HA_ACP_0_AMC_BASE_ADDRESS			XPAR_HIER_PSPL_PORT_ACP_HIER_HARDWARE_ACCELERATOR_0_AXI3_METRICS_COUNTER_0_S_AXI_LITE_BASEADDR

/**************** Type Definitions (User Defined) ********************/

typedef struct Memory {
	int identifier;
	void* base_address;
	u32 domain;
	u32 max_transfer_size;
	int is_normal_memory_flag:1;
	int is_ocm_flag:1;
	Amp_PageAttribute policy_0;
	Amp_PageAttribute policy_1;
	char* string;
} Memory;

typedef struct Params {
	int burst_len;
	int transfer_size;
	Memory* mry_obj;
} Params;

typedef struct Counts {
	struct {
		struct {
			u32 total, min, max;
		} write, read;
	} latency;
	struct {
		struct {
			u32 total;
		} write, read;
	} transaction;
	u32 count;
} Counts;

typedef struct Arm_Counts {
	struct {
		union {
			struct {
				struct {
					u32 total;
				} write, read;
			};
			struct {
				u32 total;
				u32 sleep;
			};
		};
	} latency;
} Arm_Counts;

typedef struct Monitor {
	Axi4_Metrics_Counter amc_obj;
	Counts cts_obj;
} Monitor;

typedef struct Hardware {
	Hardware_Accelerator hae_obj;		/**< Hardware Accelerator driver that encapsulates register-level operations. */
	Monitor mtr_obj;					/**< Encapsulates driver for metrics counter and local storage of counter values. */
	Params prs_obj;						/**< Encapsulates the runtime-configurable parameters of the respective hardware accelerator. */
	Arm_Counts acs_obj;					/**< Contains the metrics of the arm core's read and writes to memory. */
	int location;						/**< Value that determines where in memory over which the hardware operates. */
	int pin_run_operation;				/**< Pin of the hardware accelerator's enable. */
	u32 interrupt_id;					/**< Interrupt identifier that refers to the ready pin of the hardware accelerator. */
	int is_cache_coherent_flag:1;		/**< Indicative to whether or not the hardware accelerator is set to request coherent transactions. */
	int is_connected_to_acp_flag:1;		/**< Indicative to whether or not the hardware accelerator is connected to the acp port. */
	int is_enabled_flag:1;				/**< Indicative to whether or not the hardware accelerator is selected for operation. */
	int is_error_flag:1;				/**< Indicative to whether or not there is an inconsistency with the written and read data. */
	char* string;						/**< String that represents the hardware accelerator. */
} Hardware;

#endif /* CONSTANT_DEFINITIONS_H_ */
